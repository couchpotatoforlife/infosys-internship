# -*- coding: utf-8 -*-
"""assignment4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vZJTk_fWLm17uTKAmuUk-9dRGzIOHBUT
"""



import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.linear_model import Ridge
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("preprocessed_earthquake_data.csv")

# Select target column (Magnitude)
target_candidates = [c for c in df.columns if 'mag' in c.lower() or 'magnitude' in c.lower()]
target_col = target_candidates[0] if target_candidates else df.select_dtypes(include=[np.number]).columns[-1]
print("Target column:", target_col)

# Features = numeric columns except target
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
feature_cols = [c for c in numeric_cols if c != target_col]

# Clean dataset
df_clean = df[feature_cols + [target_col]].dropna()
X = df_clean[feature_cols].values
y = df_clean[target_col].values

print("Features:", len(feature_cols))
print("Samples:", X.shape[0])

# Cross-validation with Ridge (default alpha=1.0)
pipeline = Pipeline([
    ("scaler", StandardScaler()),
    ("ridge", Ridge(alpha=1.0))
])

scores = cross_val_score(pipeline, X, y, cv=5, scoring="r2")
print("Cross-validation R² scores:", scores)
print("Mean R²:", scores.mean())

# GridSearchCV for Ridge
param_grid = {
    "ridge__alpha": np.logspace(-3, 2, 10),   # 0.001 to 100
    "ridge__fit_intercept": [True, False]
}

grid = GridSearchCV(
    estimator=pipeline,
    param_grid=param_grid,
    cv=5,
    scoring="neg_mean_squared_error",
    n_jobs=-1
)

grid.fit(X, y)

print("Best parameters:", grid.best_params_)
print("Best CV score (negative MSE):", grid.best_score_)

# Evaluate best model on full dataset
best_model = grid.best_estimator_

y_pred = best_model.predict(X)

rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)

print("Evaluation on full dataset:")
print("RMSE:", rmse)
print("R²:", r2)